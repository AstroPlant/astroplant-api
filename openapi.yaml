---
openapi: 3.0.0
info:
  version: 1.0.0
  title: AstroPlant API
servers:
  - url: https://api.astroplant.sda-projects.nl
tags:
    - name: access
      description: Authentication and authorization endpoints.
    - name: definitions
      description: Endpoints to get information about definitions such as quantity types.
    - name: kits
      description: Endpoints to get or change information about kits.
    - name: kitRpc
      description: Endpoints to invoke remote procedure calls on kits.
    - name: users
      description: Endpoints to get or change information about users.
    - name: server
      description: Endpoints for getting information about the API server.
paths:
  "/version":
    get:
      summary: Grab the version of the API.
      tags:
        - server
      parameters: []
      responses:
        '200':
          description: The version of the API.
          content:
            "application/json":
              schema:
                type: string
                example: 1.0.0
        '429':
          $ref: "#/components/responses/ErrorRateLimit"
        '500':
          $ref: "#/components/responses/ErrorInternalServer"
  "/time":
    get:
      summary: Get the current server time.
      tags:
        - server
      parameters: []
      responses:
        '200':
          description: An RFC3339 and ISO 8601 date and time string.
          content:
            "application/json":
              schema:
                type: string
                # format: "date-time"
                example: "2019-08-18T15:30:28+00:00"
        '429':
          $ref: "#/components/responses/ErrorRateLimit"
        '500':
          $ref: "#/components/responses/ErrorInternalServer"
  "/kits":
    get:
      summary: List all kits set to be shown on the public map.
      operationId: listKits
      tags:
        - kits
      parameters:
        - in: query
          name: after
          schema:
            type: integer
          description: Fetch all kits after the given identifier.
      responses:
        '200':
          description: A paged array of kits.
          headers:
            x-next:
              $ref: "#/components/headers/CursorPaging"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Kits"
        '429':
          $ref: "#/components/responses/ErrorRateLimit"
        '500':
          $ref: "#/components/responses/ErrorInternalServer"
    post:
      summary: Create a kit.
      operationId: createKit
      security:
        - bearerAuth: []
      tags:
        - kits
      requestBody:
        description: The kit to create.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewKit"
      responses:
        '201':
          description: The created kit.
          headers:
            Location:
              description: A link to the created kit.
              required: false
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                required:
                  - kitSerial
                  - password
                properties:
                  kitSerial:
                    type: string
                  password:
                    type: string
        '400':
          $ref: "#/components/responses/InvalidJson"
        '401':
          $ref: "#/components/responses/ErrorUnauthorized"
        '429':
          $ref: "#/components/responses/ErrorRateLimit"
        '500':
          $ref: "#/components/responses/ErrorInternalServer"
  "/kits/{kitSerial}":
    get:
      summary: Info for a specific kit.
      operationId: showKitBySerial
      security:
        - bearerAuth: []
      tags:
        - kits
      parameters:
        - name: kitSerial
          in: path
          required: true
          description: The serial of the kit to retrieve.
          schema:
            type: string
      responses:
        '200':
          description: The retrieved kit.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Kit"
        '401':
          $ref: "#/components/responses/ErrorUnauthorized"
        '429':
          $ref: "#/components/responses/ErrorRateLimit"
        '500':
          $ref: "#/components/responses/ErrorInternalServer"
    patch:
      summary: Update the kit details.
      operationId: patchKit
      security:
        - bearerAuth: []
      tags:
        - kits
      parameters:
        - name: kitSerial
          in: path
          required: true
          description: The serial of the kit to patch.
          schema:
            type: string
      requestBody:
        description: The kit patch.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchKit"
      responses:
        '201':
          description: The patched kit.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Kit"
                type: object
        '400':
          $ref: "#/components/responses/InvalidJson"
        '401':
          $ref: "#/components/responses/ErrorUnauthorized"
        '429':
          $ref: "#/components/responses/ErrorRateLimit"
        '500':
          $ref: "#/components/responses/ErrorInternalServer"
  "/kits/{kitSerial}/password":
    post:
      summary: Reset the kit's password.
      operationId: resetPassword
      security:
        - bearerAuth: []
      tags:
        - kits
      parameters:
        - name: kitSerial
          in: path
          required: true
          description: The serial of the kit to reset the password for.
          schema:
            type: string
      responses:
        '200':
          description: The kit's new password.
          content:
            application/json:
              schema:
                type: string
        '401':
          $ref: "#/components/responses/ErrorUnauthorized"
        '429':
          $ref: "#/components/responses/ErrorRateLimit"
        '500':
          $ref: "#/components/responses/ErrorInternalServer"
  "/kit-rpc/{kitSerial}/version":
    get:
      summary: Query the kit for the version it is running.
      operationId: version
      security:
        - bearerAuth: []
      tags:
        - kitRpc
      parameters:
        - name: kitSerial
          in: path
          required: true
          description: The serial of the kit to query.
          schema:
            type: string
      responses:
        '200':
          description: The version as reported by the kit.
          content:
            application/json:
              schema:
                type: string
        '401':
          $ref: "#/components/responses/ErrorUnauthorized"
        '429':
          $ref: "#/components/responses/ErrorRateLimit"
        '500':
          $ref: "#/components/responses/ErrorInternalServer"
        '502':
          $ref: "#/components/responses/ErrorBadGateway"
  "/kit-rpc/{kitSerial}/uptime":
    get:
      summary: Query the kit for its uptime.
      operationId: uptime
      security:
        - bearerAuth: []
      tags:
        - kitRpc
      parameters:
        - name: kitSerial
          in: path
          required: true
          description: The serial of the kit to query.
          schema:
            type: string
      responses:
        '200':
          description: The uptime in seconds as reported by the kit.
          content:
            application/json:
              schema:
                type: integer
                format: uint64
        '401':
          $ref: "#/components/responses/ErrorUnauthorized"
        '429':
          $ref: "#/components/responses/ErrorRateLimit"
        '500':
          $ref: "#/components/responses/ErrorInternalServer"
        '502':
          $ref: "#/components/responses/ErrorBadGateway"
  "/users":
    post:
      summary: Create a user.
      operationId: createUser
      tags:
        - users
      requestBody:
        description: The user to create.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewUser"
      responses:
        '201':
          description: The user was created.
        '400':
          $ref: "#/components/responses/InvalidParameters"
        '429':
          $ref: "#/components/responses/ErrorRateLimit"
        '500':
          $ref: "#/components/responses/ErrorInternalServer"
  "/me":
    get:
      summary: Your user information.
      operationId: showMe
      security:
        - bearerAuth: []
      tags:
        - access
      responses:
        '200':
          description: Your user information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FullUser"
        '401':
          $ref: "#/components/responses/ErrorUnauthorized"
        '429':
          $ref: "#/components/responses/ErrorRateLimit"
        '500':
          $ref: "#/components/responses/ErrorInternalServer"
  "/me/auth":
    post:
      summary: "Authenticate yourself by username and password."
      operationId: authenticateByCredentials
      tags:
        - access
      requestBody:
        description: The login credentials.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthUser"
      responses:
        '200':
          description: The authentication JSON Web Token pair; i.e. a refresh token valid for a year and an access token valid for a much smaller amount of time (generally around 15 minutes). The refresh token should be stored and used to obtain an access token at regular intervals from the /me/refresh endpoint.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationTokens"
        '400':
          $ref: "#/components/responses/InvalidParameters"
        '429':
          $ref: "#/components/responses/ErrorRateLimit"
        '500':
          $ref: "#/components/responses/ErrorInternalServer"
  "/me/refresh":
    post:
      summary: "Obtain an access token from a refresh token."
      operationId: obtainAccessTokenFromRefreshToken
      tags:
        - access
      requestBody:
        description: The refresh token.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRefreshToken"
      responses:
        '200':
          description: The JSON Web Token necessary for using authenticated endpoints.
          content:
            application/json:
              schema:
                type: string
        '400':
          $ref: "#/components/responses/InvalidParameters"
        '429':
          $ref: "#/components/responses/ErrorRateLimit"
        '500':
          $ref: "#/components/responses/ErrorInternalServer"
  "/me/memberships":
    get:
      summary: Your kit memberships.
      operationId: showMyKitMemberships
      security:
        - bearerAuth: []
      tags:
        - access
      responses:
        '200':
          description: Kit memberships.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/KitMembership"
        '401':
          $ref: "#/components/responses/ErrorUnauthorized"
        '429':
          $ref: "#/components/responses/ErrorRateLimit"
        '500':
          $ref: "#/components/responses/ErrorInternalServer"
  "/peripheral-definitions":
    get:
      summary: List all peripheral device definitions.
      operationId: listPeripheralDefinitions
      tags:
        - definitions
      parameters:
        - in: query
          name: after
          schema:
            type: integer
          description: Fetch all peripheral definitions after the given identifier.
        - in: query
          name: withExpectedQuantityTypes
          schema:
            type: boolean
          description: If set to true, include in the output the quantity types the peripheral is expected to produce.
      responses:
        '200':
          description: A paged array of peripheral definitions.
          headers:
            x-next:
              $ref: "#/components/headers/CursorPaging"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PeripheralDefinitions"
        '429':
          $ref: "#/components/responses/ErrorRateLimit"
        '500':
          $ref: "#/components/responses/ErrorInternalServer"
  "/quantity-types":
    get:
      summary: List all quantity types.
      operationId: listQuantityTypes
      tags:
        - definitions
      parameters:
        - in: query
          name: after
          schema:
            type: integer
          description: Fetch all quantity types after the given identifier.
      responses:
        '200':
          description: A paged array of quantity types.
          headers:
            x-next:
              $ref: "#/components/headers/CursorPaging"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuantityTypes"
        '429':
          $ref: "#/components/responses/ErrorRateLimit"
        '500':
          $ref: "#/components/responses/ErrorInternalServer"
  "/permissions":
    get:
      summary: List all actions you are permitted to perform on the specified kit.
      operationId: listPermissions
      security:
        - bearerAuth: []
      tags:
        - kits
      parameters:
        - in: query
          name: kitSerial
          schema:
            type: string
          description: The serial of the kit to fetch the permissions for.
      responses:
        '200':
          description: An array of actions you are permitted to perform on the specified kit.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Permissions"
        '429':
          $ref: "#/components/responses/ErrorRateLimit"
        '500':
          $ref: "#/components/responses/ErrorInternalServer"
  "/kit-configurations":
    get:
      summary: The configurations of the specified kit.
      operationId: listConfigurations
      security:
        - bearerAuth: []
      tags:
        - kits
      parameters:
        - name: kitSerial
          in: query
          required: true
          description: The serial of the kit to retrieve the configurations of.
          schema:
            type: string
      responses:
        '200':
          description: The retrieved configurations.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/KitConfigurationWithPeripherals"
        '401':
          $ref: "#/components/responses/ErrorUnauthorized"
        '429':
          $ref: "#/components/responses/ErrorRateLimit"
        '500':
          $ref: "#/components/responses/ErrorInternalServer"
    post:
      summary: Create a new configuration.
      operationId: createConfiguration
      security:
        - bearerAuth: []
      tags:
        - kits
      parameters:
        - name: kitSerial
          in: query
          required: true
          description: The serial of the kit to create a configuration for.
          schema:
            type: string
      requestBody:
        description: The configuration to create.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewKitConfiguration"
      responses:
        '201':
          description: The created kit configuration.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KitConfiguration"
                type: object
        '400':
          $ref: "#/components/responses/InvalidJson"
        '401':
          $ref: "#/components/responses/ErrorUnauthorized"
        '429':
          $ref: "#/components/responses/ErrorRateLimit"
        '500':
          $ref: "#/components/responses/ErrorInternalServer"
  "/kit-configurations/{configurationId}":
    patch:
      summary: Update the configuration.
      operationId: patchConfiguration
      security:
        - bearerAuth: []
      tags:
        - kits
      parameters:
        - name: kitSerial
          in: query
          required: true
          description: The serial of the kit to patch the configuration for.
          schema:
            type: string
        - name: configurationId
          in: path
          required: true
          description: The id of the configuration to patch.
          schema:
            type: number
      requestBody:
        description: The configuration patch.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchKitConfiguration"
      responses:
        '201':
          description: The patched kit configuration.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KitConfiguration"
                type: object
        '400':
          $ref: "#/components/responses/InvalidJson"
        '401':
          $ref: "#/components/responses/ErrorUnauthorized"
        '429':
          $ref: "#/components/responses/ErrorRateLimit"
        '500':
          $ref: "#/components/responses/ErrorInternalServer"
  "/kit-configurations/{configurationId}/peripherals":
    post:
      summary: Add a peripheral to the configuration.
      operationId: createPeripheral
      security:
        - bearerAuth: []
      tags:
        - kits
      parameters:
        - name: kitSerial
          in: query
          required: true
          description: The serial of the kit to add a peripheral to the configuration to.
          schema:
            type: string
        - name: configurationId
          in: path
          required: true
          description: The id of the configuration to add a peripheral to.
          schema:
            type: number
      requestBody:
        description: The peripheral to add.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewPeripheral"
      responses:
        '201':
          description: The added peripheral.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Peripheral"
                type: object
        '400':
          $ref: "#/components/responses/InvalidJson"
        '401':
          $ref: "#/components/responses/ErrorUnauthorized"
        '429':
          $ref: "#/components/responses/ErrorRateLimit"
        '500':
          $ref: "#/components/responses/ErrorInternalServer"
  "/kit-configurations/{configurationId}/peripherals/{peripheralId}":
    patch:
      summary: Update a peripheral.
      operationId: patchPeripheral
      security:
        - bearerAuth: []
      tags:
        - kits
      parameters:
        - name: kitSerial
          in: query
          required: true
          description: The serial of the kit to update the peripheral of.
          schema:
            type: string
        - name: configurationId
          in: path
          required: true
          description: The id of the configuration to update the peripheral of.
          schema:
            type: number
        - name: peripheralId
          in: path
          required: true
          description: The id of the peripheral to update.
          schema:
            type: number
      requestBody:
        description: The peripheral patch.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchPeripheral"
      responses:
        '200':
          description: The peripheral has been deleted.
        '400':
          $ref: "#/components/responses/InvalidJson"
        '401':
          $ref: "#/components/responses/ErrorUnauthorized"
        '429':
          $ref: "#/components/responses/ErrorRateLimit"
        '500':
          $ref: "#/components/responses/ErrorInternalServer"
    delete:
      summary: Delete a peripheral.
      operationId: deletePeripheral
      security:
        - bearerAuth: []
      tags:
        - kits
      parameters:
        - name: kitSerial
          in: query
          required: true
          description: The serial of the kit to delete a peripheral from.
          schema:
            type: string
        - name: configurationId
          in: path
          required: true
          description: The id of the configuration to delete a peripheral from.
          schema:
            type: number
        - name: peripheralId
          in: path
          required: true
          description: The id of the peripheral to delete.
          schema:
            type: number
      responses:
        '200':
          description: The peripheral has been deleted.
        '400':
          $ref: "#/components/responses/InvalidJson"
        '401':
          $ref: "#/components/responses/ErrorUnauthorized"
        '429':
          $ref: "#/components/responses/ErrorRateLimit"
        '500':
          $ref: "#/components/responses/ErrorInternalServer"
  "/measurements/aggregate-measurements":
    get:
      summary: Aggregate measurements made by a kit in the last 5 days.
      operationId: listAggregateMeasurements
      security:
        - bearerAuth: []
      tags:
        - measurements
      parameters:
        - name: kitSerial
          in: query
          required: true
          description: The serial of the kit to retrieve aggregate measurements.
          schema:
            type: string
      responses:
        '200':
          description: The retrieved aggregate measurements
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AggregateMeasurement"
        '401':
          $ref: "#/components/responses/ErrorUnauthorized"
        '429':
          $ref: "#/components/responses/ErrorRateLimit"
        '500':
          $ref: "#/components/responses/ErrorInternalServer"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ProblemDetails:
      type: object
      description: A basic problem report, conforming to RFC7807. Most problems will provide additional fields with information.
      properties:
        type:
          type: string
        title:
          type: string
        status:
          type: integer
        detail:
          type: string
      example:
        type:
          about:blank
        title: Bad Request
        status: 400
    ProblemInternalServer:
      type: object
      properties:
        errorCode:
          description: "The error code for internal server errors: 1"
          type: integer
          format: uint16
        errorName:
          description: "The error name for internal server errors: internalServer"
          type: string
      example:
        errorCode: 1
        errorName: internalServerError
    ProblemRateLimit:
      type: object
      properties:
        errorCode:
          description: "The error code for rate limit errors: 2"
          type: integer
          format: uint16
        errorName:
          description: "The error name for rate limit errors: rateLimit"
          type: string
        errorValue:
          type: object
          properties:
            waitTimeMillis:
              type: integer
      example:
        errorCode: 2
        errorName: rateLimit
        errorValue:
          waitTimeMillis: 226
    ProblemInvalidParameters:
      allOf:
        - $ref: "#/components/schemas/ProblemDetails"
        - type: object
          properties:
            invalidParameters:
              type: object
              additionalProperties:
                type: array
                items:
                  anyOf:
                    - type: string
                      enum:
                        - mustBeEmailAddress
                        - mustBeUrl
                        - alreadyExists
                        - other
                    - type: object
                      required:
                        - mustBeInRange
                      properties:
                        mustBeInRange:
                          type: object
                          required:
                            - min
                            - max
                          properties:
                            min:
                              type: number
                              format: float
                            max:
                              type: number
                              format: float
                    - type: object
                      required:
                        - mustHaveLengthBetween
                      properties:
                        mustHaveLengthBetween:
                          type: object
                          anyOf:
                            - required:
                                - min
                            - required:
                                - max
                          properties:
                            min:
                              type: integer
                            max:
                              type: integer
                    - type: object
                      required:
                        - mustHaveLengthExactly
                      properties:
                        mustHaveLengthExactly:
                          type: object
                          required:
                            - length
                          properties:
                            length:
                              type: integer
                    - type: object
                      required:
                        - invalidToken
                      properties:
                        invalidToken:
                          type: object
                          required:
                            - category
                          properties:
                            category:
                              type: string
                              enum:
                                - missing
                                - malformed
                                - expired
      example:
        type: "/probs/invalid-parameters"
        title: Your request parameters did not validate.
        status: 400
        invalidParameters:
          username:
            - mustBeUnique
          email:
            - mustBeEmailAddress
            - mustHaveLengthBetween:
              min: 0
              max: 255
    Kit:
      type: object
      required:
        - id
        - serial
        - name
      properties:
        id:
          type: integer
          format: int32
        serial:
          type: string
        name:
          type: string
        description:
          type: string
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float
        privacyPublicDashboard:
          type: boolean
        privacyShowOnMap:
          type: boolean
    PatchKit:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float
        privacyPublicDashboard:
          type: boolean
        privacyShowOnMap:
          type: boolean
    NewKit:
      type: object
      required:
            - privacyPublicDashboard
            - privacyShowOnMap
      properties:
            name:
              type: string
            description:
              type: string
            latitude:
              type: number
              format: float
            longitude:
              type: number
              format: float
            privacyPublicDashboard:
              type: boolean
            privacyShowOnMap:
              type: boolean
      example:
            latitude: 52.1326
            longitude: 5.2913
            privacyShowOnMap: true
            privacyPublicDashboard: false
    Kits:
      type: array
      items:
        $ref: "#/components/schemas/Kit"
    KitMembership:
      type: object
      required:
        - id
        - user
        - kit
        - accessConfigure
        - accessSuper
        - datetimeLinked
      properties:
        id:
          type: integer
          format: int32
        user:
          type: integer
          format: int32
        kit:
          $ref: "#/components/schemas/Kit"
        accessConfigure:
          type: boolean
        accessSuper:
          type: boolean
        datetimeLinked:
          type: string
          format: "date-time"
    NewUser:
      type: object
      required:
        - username
        - password
        - emailAddress
      properties:
        username:
          type: string
        password:
          type: string
        emailAddress:
          type: string
          format: email
      example:
        username: douglas
        password: hunter2
        email: d.adams@example.com
    AuthUser:
      type: object
      required:
            - username
            - password
      properties:
            username:
              type: string
            password:
              type: string
      example:
            username: douglas
            password: hunter2
    FullUser:
      type: object
      required:
        - id
        - username
        - displayName
        - emailAddress
        - useEmailAddressForGravatar
        - gravatarAlternative
      properties:
        id:
          type: integer
          format: int32
        username:
          type: string
        displayName:
          type: string
        emailAddress:
          type: string
          format: email
        useEmailAddressForGravatar:
          type: boolean
        gravatarAlternative:
          type: string
      example:
        id: 42
        username: douglas
        displayName: Douglas Adams
        emailAddress: d.adams@example.com
        useEmailAddressForGravatar: false
        gravatarAlternative: "3NbpHjTp4fYyxnPw4$6xcTp!J%hyhdJq"
    AuthRefreshToken:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
    AuthenticationTokens:
      type: object
      required:
        - refreshToken
        - accessToken
      properties:
        refreshToken:
          type: string
        accessToken:
          type: string
    PeripheralDefinition:
      type: object
      required:
        - id
        - name
        - moduleName
        - className
        - configurationSchema
        - commandSchema
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        description:
          type: string
        brand:
          type: string
        model:
          type: string
        moduleName:
          type: string
        className:
          type: string
        configurationSchema:
          type: object
        commandSchema:
          type: object
          nullable: true
        expectedQuantityTypes:
          type: array
          items:
            type: integer
            format: int32
    PeripheralDefinitions:
      type: array
      items:
        $ref: "#/components/schemas/PeripheralDefinition"
    ExpectedQuantityType:
      type: object
      required:
        - id
        - peripheralDefinition
        - quantityType
      properties:
        id:
          type: integer
          format: int32
        peripheralDefinition:
          type: integer
          format: int32
        quantityType:
          type: integer
          format: int32
    Peripheral:
      type: object
      required:
        - id
        - kitId
        - configurationId
        - peripheralDefinitionId
        - name
        - configuration
      properties:
        id:
          type: integer
          format: int32
        kitId:
          type: integer
          format: int32
        configurationId:
          type: integer
          format: int32
        peripheralDefinitionId:
          type: integer
          format: int32
        name:
          type: string
        configuration:
          type: object
    NewPeripheral:
      type: object
      required:
        - peripheralDefinitionId
        - name
        - configuration
      properties:
        peripheralDefinitionId:
          type: integer
          format: int32
        name:
          type: string
        configuration:
          type: object
    PatchPeripheral:
      type: object
      properties:
        name:
          type: string
        configuration:
          type: object
    Peripherals:
      type: array
      items:
        $ref: "#/components/schemas/Peripheral"
    QuantityType:
      type: object
      required:
        - id
        - physicalQuantity
        - physicalUnit
      properties:
        id:
          type: integer
          format: int32
        physicalQuantity:
          type: string
        physicalUnit:
          type: string
        physicalUnitSymbol:
          type: string
    QuantityTypes:
      type: array
      items:
        $ref: "#/components/schemas/QuantityType"
    Permission:
      type: string
      enum:
        - view
        - subscribeRealTimeMeasurements
        - editDetails
        - editConfiguration
        - editMembers
        - setSuperMember
    Permissions:
      type: array
      items:
        $ref: "#/components/schemas/Permission"
    KitConfiguration:
      type: object
      required:
        - id
        - kitId
        - rulesSupervisorModuleName
        - rulesSupervisorClassName
        - rules
        - active
        - neverUsed
      properties:
        id:
          type: integer
          format: int32
        kitId:
          type: integer
          format: int32
        description:
          type: string
        rulesSupervisorModuleName:
          type: string
        rulesSupervisorClassName:
          type: string
        rules:
          type: object
        active:
          type: boolean
        neverUsed:
          type: boolean
    NewKitConfiguration:
      type: object
      properties:
        description:
          type: string
    PatchKitConfiguration:
      type: object
      properties:
        description:
          type: string
        rulesSupervisorModuleName:
          type: string
        rulesSupervisorClassName:
          type: string
        rules:
          type: object
        active:
          type: boolean
    KitConfigurationWithPeripherals:
      allOf:
        - $ref: "#/components/schemas/KitConfiguration"
        - type: object
          required:
            - peripherals
          properties:
            peripherals:
              $ref: "#/components/schemas/Peripherals"
    AggregateMeasurement:
      type: object
      required:
        - id
        - peripheralId
        - kitId
        - kitConfigurationId
        - quantityTypeId
        - aggregateType
        - value
        - datetimeStart
        - datetimeEnd
      properties:
        id:
          type: string
          format: uuid
        peripheralId:
          type: number
          format: int32
        kitId:
          type: number
          format: int32
        kitConfigurationId:
          type: number
          format: int32
        quantityTypeId:
          type: number
          format: int32
        aggregateType:
          type: string
        value:
          type: number
        datetimeStart:
          type: string
          format: date-time
        datetimeEnd:
          type: string
          format: date-time
  headers:
    CursorPaging:
      description: A link to the next page.
      required: false
      schema:
        type: string
  responses:
    InvalidJson:
      description: The JSON you provided was invalid.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProblemDetails"
    InvalidParameters:
      description: You provided invalid parameters.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProblemInvalidParameters"
    ErrorUnauthorized:
      description: The request was denied because you are not authorized to access the resource.
    ErrorRateLimit:
      description: The request was denied because you exceeded the rate limit.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProblemRateLimit"
    ErrorInternalServer:
      description: An unexpected error occurred.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProblemInternalServer"
    ErrorBadGateway:
      description: An error occurred while proxying the RPC request.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProblemDetails"
